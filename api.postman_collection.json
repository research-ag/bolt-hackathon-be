{
  "info": {
    "name": "Bolt Hackathon API - IC Hosting Service",
    "description": "Complete API collection for Internet Computer deployment service with Supabase backend. Includes authentication, profile management, and full canister lifecycle management.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.1.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://127.0.0.1:54321",
      "type": "string",
      "description": "Local Supabase instance URL"
    },
    {
      "key": "supabase_url", 
      "value": "http://127.0.0.1:54321",
      "type": "string",
      "description": "Supabase API URL"
    },
    {
      "key": "anon_key",
      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0",
      "type": "string",
      "description": "Supabase anonymous key"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT token from authentication"
    },
    {
      "key": "user_email",
      "value": "test@example.com", 
      "type": "string",
      "description": "Test user email"
    },
    {
      "key": "user_password",
      "value": "password123",
      "type": "string",
      "description": "Test user password"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "User ID extracted from authentication"
    },
    {
      "key": "canister_id",
      "value": "",
      "type": "string",
      "description": "IC Canister ID for testing"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "User authentication endpoints using Supabase Auth",
      "item": [
        {
          "name": "Sign Up",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{anon_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\",\n  \"data\": {\n    \"username\": \"testuser\"\n  }\n}"
            },
            "url": {
              "raw": "{{supabase_url}}/auth/v1/signup",
              "host": ["{{supabase_url}}"],
              "path": ["auth", "v1", "signup"]
            },
            "description": "Create a new user account"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('jwt_token', response.access_token);",
                  "    }",
                  "    if (response.user && response.user.id) {",
                  "        pm.collectionVariables.set('user_id', response.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Sign In",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type", 
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{anon_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}"
            },
            "url": {
              "raw": "{{supabase_url}}/auth/v1/token?grant_type=password",
              "host": ["{{supabase_url}}"],
              "path": ["auth", "v1", "token"],
              "query": [{"key": "grant_type", "value": "password"}]
            },
            "description": "Sign in with email and password"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('jwt_token', response.access_token);",
                  "    }",
                  "    if (response.user && response.user.id) {",
                  "        pm.collectionVariables.set('user_id', response.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "apikey",
                "value": "{{anon_key}}"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{supabase_url}}/auth/v1/user",
              "host": ["{{supabase_url}}"],
              "path": ["auth", "v1", "user"]
            },
            "description": "Get current user information"
          }
        }
      ]
    },
    {
      "name": "üë§ Profile Management",
      "description": "User profile management endpoints",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/functions/v1/profile",
              "host": ["{{base_url}}"],
              "path": ["functions", "v1", "profile"]
            },
            "description": "Get user profile information"
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization", 
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updated_username\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/functions/v1/profile",
              "host": ["{{base_url}}"],
              "path": ["functions", "v1", "profile"]
            },
            "description": "Update user profile information"
          }
        }
      ]
    },
    {
      "name": "üè≠ Canister Management",
      "description": "Internet Computer canister lifecycle management - All endpoints require authentication",
      "item": [
        {
          "name": "Create Canister",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/functions/v1/canister-create",
              "host": ["{{base_url}}"],
              "path": ["functions", "v1", "canister-create"]
            },
            "description": "Create a new IC canister with asset canister installed and default welcome page. User is identified from JWT token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.canisterId) {",
                  "        pm.collectionVariables.set('canister_id', response.data.canisterId);",
                  "        console.log('Canister created:', response.data.canisterId);",
                  "        console.log('Frontend URL:', response.data.frontendUrl);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "List User Canisters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/functions/v1/canisters-list",
              "host": ["{{base_url}}"],
              "path": ["functions", "v1", "canisters-list"]
            },
            "description": "Get all canisters for the authenticated user with full IC information including cycles, WASM size, controllers, etc."
          }
        },
        {
          "name": "Get Canister Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/functions/v1/canister-get?canisterId={{canister_id}}",
              "host": ["{{base_url}}"],
              "path": ["functions", "v1", "canister-get"],
              "query": [
                {
                  "key": "canisterId",
                  "value": "{{canister_id}}",
                  "description": "IC Canister ID to get details for"
                }
              ]
            },
            "description": "Get detailed information about a specific canister owned by the authenticated user including cycles balance, WASM binary size, module hash, and controllers"
          }
        },
        {
          "name": "Delete Canister",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"canisterId\": \"{{canister_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/functions/v1/canister-delete",
              "host": ["{{base_url}}"],
              "path": ["functions", "v1", "canister-delete"]
            },
            "description": "Soft delete a canister owned by the authenticated user (marks as deleted in database, doesn't actually destroy the IC canister)"
          }
        }
      ]
    },
    {
      "name": "üß™ Testing Scenarios",
      "description": "Complete testing workflows",
      "item": [
        {
          "name": "Full Workflow Test",
          "item": [
            {
              "name": "1. Sign Up New User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "apikey",
                    "value": "{{anon_key}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"workflow-test@example.com\",\n  \"password\": \"testpassword123\",\n  \"data\": {\n    \"username\": \"workflow-tester\"\n  }\n}"
                },
                "url": {
                  "raw": "{{supabase_url}}/auth/v1/signup",
                  "host": ["{{supabase_url}}"],
                  "path": ["auth", "v1", "signup"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.access_token) {",
                      "        pm.collectionVariables.set('jwt_token', response.access_token);",
                      "    }",
                      "    if (response.user && response.user.id) {",
                      "        pm.collectionVariables.set('user_id', response.user.id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "2. Create First Canister",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{base_url}}/functions/v1/canister-create",
                  "host": ["{{base_url}}"],
                  "path": ["functions", "v1", "canister-create"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.success && response.data && response.data.canisterId) {",
                      "        pm.collectionVariables.set('canister_id', response.data.canisterId);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. List All Canisters",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/functions/v1/canisters-list",
                  "host": ["{{base_url}}"],
                  "path": ["functions", "v1", "canisters-list"]
                }
              }
            },
            {
              "name": "4. Get Canister Details",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/functions/v1/canister-get?canisterId={{canister_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["functions", "v1", "canister-get"],
                  "query": [
                    {
                      "key": "canisterId",
                      "value": "{{canister_id}}"
                    }
                  ]
                }
              }
            },
            {
              "name": "5. Delete Canister",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"canisterId\": \"{{canister_id}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/functions/v1/canister-delete",
                  "host": ["{{base_url}}"],
                  "path": ["functions", "v1", "canister-delete"]
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set user_id if not set but jwt_token exists",
          "if (pm.collectionVariables.get('jwt_token') && !pm.collectionVariables.get('user_id')) {",
          "    try {",
          "        const token = pm.collectionVariables.get('jwt_token');",
          "        const payload = JSON.parse(atob(token.split('.')[1]));",
          "        if (payload.sub) {",
          "            pm.collectionVariables.set('user_id', payload.sub);",
          "        }",
          "    } catch (e) {",
          "        console.log('Could not extract user_id from token');",
          "    }",
          "}"
        ]
      }
    }
  ]
}
